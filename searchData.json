[{"title":"github를 이용한 hexo 블로그 만들기 (2) - casper Theme","url":"/2019/01/15/makeHexoBlog-02/","content":"저번 시간에 repository 생성까지 알아봤습니다. 이번엔 repo 생성 후 선택한 테마를 클론하는 방법과 나의 블로그가 잘 생성되었는지 확인까지 해보도록 할게요.  \n  \n## 들어가기      \n\n1. 선택한 테마 클론하기  \n선택한 테마를 클론하는 방법은 몇가지가 존재합니다.  \n아래의 사진에서 **Clone or download**를 클릭하면 여러 방법으로 클론할 수 있어요.   \n- github URL을 복사해서 GUI 프로그램을 이용한 클론방법.  \n- github Desktop을 이용한 로컬에 저장하는 방법.   \n- ZIP 파일을 다운받아서 로컬에 저장하는 방법.  \n- 테마를 가진 주인의 레포지토리를 _Fork_ 해서 등록하는 방법.  \n<img src=\"/ing/clone_01\" alt=\"클론하는방법\" style=\"width:363px; height:204px;\"/>   \n *****      \n   \n저는 github GUI 프로그램인 소스트리와 명령프롬프트(gitBash)를 이용해서 클론했어요.  \n- 소스트리를 다운받고, 본인의 깃허브 아이디와 연동합니다. 연동 한 후에,  **New tap**을 열어 **Create**를 합니다. 목적지의 경로는 본인이 만들 블로그의 로컬 디스크 경로입니다.  \n계정에는 이미 _username.github.io_ 라는 저장소가 있기 때문에 체크를 해제합니다.  \n\n블로그를 만들 폴더의 경로를 정해서 생성해주세요. ex) D:\\GitHubPages    \n![소스트리세팅1](/img/sourceTreeSetting_01.png)  \n\n폴더를 생성했으면,  설정에 들어가서 원격이름을 **origin** URL/경로를 **https://github.com/본인아이디(이름).github.io** 라고 칩니다.\n![소스트리세팅2](/img/sourceTreeSetting_02.png)  \n\n- 생성 후에 gitBash를 켜줍니다. 처음 생성할때는 username 과 useremail을 통해 사용자 등록이 필요합니다.   \n```\n$ git config --global user.name \"깃허브에설정한나의이름\"  \n$ git config --global user.email \"깃허브에설정한나의이메일\"\n```  \n이후, 깃헙에 접속하면 새로운 프로젝트를 시작하거나, 기존에 가지고 있던 프로젝트 리스트들이 나옵니다. (현재는 따로 나오는거같진 않더군요.)   \n\n2. hexo 설치하기  \n터미널을 실행시킵니다. git을 설치하게 되면 바탕화면 우클릭으로 Git Bash도 사용할 수 있습니다.  \n'$' 을 제외한 명령어를 입력해 주세요.  \n```\n$ npm install -g hexo-cli\n```  \n이후, 블로그를 생성할 자신이 원하는 폴더 위치로 이동합니다.  \n```\nex) cd d:\\gitHubPages\n```  \n```\n$ hexo init 블로그이름\n```  \n입력하면 본인이 원한는 위치에 블로그 이름으로 된 폴더가 생성이 됩니다. 저는 **D:\\gitHubPages\\폴더이름** 이 되겠죠?  \n현재 위치에서 블로그이름 폴더 안으로 다시 한번 들어가서 npm과 테마를 설치합니다.  \n```\n$ cd 블로그이름  \n$ npm install\n$ git clone https://github.com/xzhih/hexo-theme-casper.git\n```  \n그리고 가장 중요한 deploy 설치를 해줍니다.\n```\n$ npm install hexo-deployer-git --save\n```  \n> npm이란 Node Pakage Manager의 줄임표현이며 node.js로 만들어진 pakage(module)을 관리해주는 툴입니다.  \n원문:[노드js원문](https://docs.npmjs.com/about-npm/index.html)  \n추가내용:[노드js설명](https://m.blog.naver.com/magnking/220961896609)\n\n","tags":["hexo"],"categories":["hexo"]},{"title":"github과 hexo를 이용해 블로그 만들기 (1) - casper Theme","url":"/2019/01/12/makeHexoBlog_01/","content":"\n## 알아야 할 사전지식  \n       \n### 1. GithibPages         \n기본적으로  **gitHubPages**를 생성 알아야 깃헙 블로그를 제작할 수 있습니다.     \n          \n### 2. HTML, CSS, Javascript  \nHTML 과 CSS, Javascript를 알아야 본인이 원하는대로 수정할 수 있습니다.\n          \n### 3. NodeJs        \n대부분의 플러그인을 NodeJs를 통해 설치하기 때문에 약간의 지식을 알아야합니다.  \n  > 사이트: [NodeJs](https://nodejs.org)      \n     \n### 4. MarkDown문법      \n마크다운 문법은 텍스트 기반의 마크업 언얼로 2004년 존그루버에 의해 만들어졌습니다. HTML의 마크업 언어를 알고 계신다면 쉽고 빠르게 컨텐츠 작성이 가능합니다.  \n  > 사이트: [MarkDown](https://gist.github.com/ihoneymon/652be052a0727ad59601) 에서 마크다운을 배울 수 있습니다. \n  *****  \n\n          \n## 들어가기  \n      \n        \n저는 HEXO의 Casper 라는 테마를 선택했습니다. Jekyll의 Jasper 시리즈와 똑같은 테마에요!!  \n사실 jekyll로 하려다가 Deployment 하는 도중에 고정경로인 제 블로그 주소가 계속 local로 잡히는 바람에 해결하지 못하고 Hexo로 옮겼어요...ㅠㅠ  \n      \n          \n1. github 가입하기  \n> ['Github'바로가기](https://github.com)  \n\n<img src=\"/img/github-signUp.png\"  alt=\"깃허브회원가입\" style=\"width:300px; height:430px; \"/>\n우측 상단의 sign up 버튼을 누르거나 화면의 회원가입 절차를 걸쳐 가입을 하면 좌측 상단 ***Repositories***라는 탭에서 New를 클릭 합니다.  \n\n그럼 아래의 그림처럼 나오는데, Repositiory의 이름을 본인의 name.github.io로 만들어야 정상적인 페이지가 생성됩니다.  (저는 이미 있기 때문에 경고표시가 뜹니다.)\n![makenewrepo](/img/makeNewRepo.png)  \nRepo 이름을 정한 후에 레포를 생성합니다. *레포지토리*를  생성하게 되면 아무것도 없는 빈 저장소가 본인의 계정에 생기게 되고, 앞으로 이 저장소 안에 블로그 테마와 수정한 코드들을 버전관리하게 됩니다.  \n2. node.js 설치하기  \n>['Node.js'다운로드](https://nodejs.org/ko/download/)  \n자신의 컴퓨터에 맞는 플랫폼을 설치하세요.  \n![노드js설치](/img/nodejsInstall.png)  \n다음 포스트에서는 테마를 선택하고, 적용한 테마를 나의 블로그에 올리는 방법을 알아보도록 할게요.  \n  \n<mark style=\"font-size:20px; background-color:rgba(190,290,50,0.3); \">다음편에서 뵙겠습니다~!!</mark>  \n\n\n  \n","tags":["hexo"],"categories":["hexo"]},{"title":"2019-01-11","url":"/2019/01/11/2019-01-11/","content":"# Optional app.  \ntitle: #post's title\ncover_img: #show in home page, the post card header\nfeature_img: #show in post page, content header\ndescription: the llatter part of post application  (for meta)\nkeywords: keywords for searching (for meta)\ndate: #YY:MM:DD\ntags: #making tagcloud. when you click those tags, you can check it relations with same tagName\narchive:\n\n","tags":["first"],"categories":["first"]},{"title":"scaffoldtest","url":"/2019/01/09/scaffoldtest/","tags":["hexo"],"categories":["test"]},{"title":"2019-01-09","url":"/2019/01/09/2019-01-09/","content":"\n# 안녕...\n\n## 하이?\n\n### 헬로우?  \n      \n```javascript\n function(execHighlight){\n  var bar = Client.X;\n  var foo = 100; \n }\n```","tags":["newStuff`s"],"categories":["first"]},{"title":"first-post","url":"/2019/01/09/first-post/","content":"\n# 타이틀\n나의 첫번째 포스트입니다.\n...\n...","tags":["hexo"],"categories":["first"]},{"title":"Hello World","url":"/2019/01/09/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["hexo"],"categories":["test"]}]